---
- name: Configure FDO node for running container registry
  hosts: fdo-node
  gather_facts: true
  become: true

  vars_files:
    - vars/demo_vars.yml

  tasks:
    - name: FDO node firewall operations
      block:
        - name: See if firewalld is installed
          ansible.builtin.stat:
            path: /usr/sbin/firewalld
          register: _firewalld_stat

        - name: Open registry ports on host firewall
          ansible.posix.firewalld:
            port: '5000/tcp'
            zone: '{{ "libvirt" if demo_type == "fdo-hosted" else "public" }}'
            state: enabled
            immediate: true
            permanent: true
          when: _firewalld_stat.stat.exists

    - name: Ensure registry configuration directory exists
      ansible.builtin.file:
        path: /etc/containers/registries.conf.d
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Define FDO container registry configuration
      ansible.builtin.template:
        src: 999-{{ demo_registry_container_name }}-insecure.conf.j2
        dest: /etc/containers/registries.conf.d/999-{{ demo_registry_container_name }}-insecure.conf
        owner: root
        group: root
        mode: 0644

    - name: Enable linger for user running registry container
      ansible.builtin.command: >
        loginctl enable-linger {{ ansible_env.SUDO_USER }}
      args:
        creates: /var/lib/systemd/linger/{{ ansible_env.SUDO_USER }}


- name: Create container registry container
  hosts: fdo-node
  gather_facts: true
  become: false

  vars_files:
    - vars/demo_vars.yml

  tasks:
    - name: Ensure user systemd config directory exists
      ansible.builtin.file:
        path: '{{ ansible_user_dir }}/.config/systemd/user'
        state: directory

    - name: Create container registry volume
      containers.podman.podman_volume:
        name: '{{ demo_registry_container_name }}-data'
        state: present

    - name: See if container registry container exists
      containers.podman.podman_container_info:
        name: '{{ demo_registry_container_name }}'
      register: _registry_container_info

    - name: Generate container registry systemd unit file
      block:
        # stopped state will create but not run the container so the
        # systemd unit file can be generated
        # TODO why not use latest image?
        - name: Create container registry container
          containers.podman.podman_container:
            name: '{{ demo_registry_container_name }}'
            image: 'docker.io/library/registry:2'
            state: stopped
            auto_remove: true
            volume:
              - '{{ demo_registry_container_name }}-data:/var/lib/registry'
            publish:
              - '5000:5000'
            generate_systemd:
              path: '{{ ansible_user_dir }}/.config/systemd/user'
              new: true
          notify: Start container registry service

        - name: Remove stopped container registry container
          containers.podman.podman_container:
            name: '{{ demo_registry_container_name }}'
            state: absent
      when: not _registry_container_info.containers


  handlers:
    - name: Start container registry service
      ansible.builtin.systemd:
        name: container-{{ demo_registry_container_name }}.service
        enabled: true
        state: restarted
        scope: user


...
# vim: ft=yaml.ansible
